From 54ed844c5d3f96b14949885059a4220d6e2ba17a Mon Sep 17 00:00:00 2001
From: Yavor Doganov <yavor@gnu.org>
Date: Sun, 7 Jan 2024 00:00:00 +0000
Subject: [PATCH 1/3] Port to PCRE2

---
 xbmc/utils/RegExp.cpp          | 185 +++++++++++++++++----------------
 xbmc/utils/RegExp.h            |  22 ++--
 xbmc/utils/test/TestRegExp.cpp |  23 ++++
 3 files changed, 125 insertions(+), 105 deletions(-)

diff --git a/xbmc/utils/RegExp.cpp b/xbmc/utils/RegExp.cpp
index 9667b646a9..7d9ae4940d 100644
--- a/xbmc/utils/RegExp.cpp
+++ b/xbmc/utils/RegExp.cpp
@@ -16,27 +16,6 @@
 #include <stdlib.h>
 #include <string.h>
 
-using namespace PCRE;
-
-#ifndef PCRE_UCP
-#define PCRE_UCP 0
-#endif // PCRE_UCP
-
-#ifdef PCRE_CONFIG_JIT
-#define PCRE_HAS_JIT_CODE 1
-#endif
-
-#ifndef PCRE_STUDY_JIT_COMPILE
-#define PCRE_STUDY_JIT_COMPILE 0
-#endif
-#ifndef PCRE_INFO_JIT
-// some unused number
-#define PCRE_INFO_JIT 2048
-#endif
-#ifndef PCRE_HAS_JIT_CODE
-#define pcre_free_study(x) pcre_free((x))
-#endif
-
 int CRegExp::m_Utf8Supported = -1;
 int CRegExp::m_UcpSupported  = -1;
 int CRegExp::m_JitSupported  = -1;
@@ -51,25 +30,24 @@ void CRegExp::InitValues(bool caseless /*= false*/, CRegExp::utf8Mode utf8 /*= a
 {
   m_utf8Mode    = utf8;
   m_re          = NULL;
-  m_sd          = NULL;
-  m_iOptions    = PCRE_DOTALL | PCRE_NEWLINE_ANY;
+  m_ctxt        = NULL;
+  m_iOptions    = PCRE2_DOTALL;
   if(caseless)
-    m_iOptions |= PCRE_CASELESS;
+    m_iOptions |= PCRE2_CASELESS;
   if (m_utf8Mode == forceUtf8)
   {
     if (IsUtf8Supported())
-      m_iOptions |= PCRE_UTF8;
+      m_iOptions |= PCRE2_UTF;
     if (AreUnicodePropertiesSupported())
-      m_iOptions |= PCRE_UCP;
+      m_iOptions |= PCRE2_UCP;
   }
 
   m_offset      = 0;
   m_jitCompiled = false;
   m_bMatched    = false;
   m_iMatchCount = 0;
+  m_iOvector    = NULL;
   m_jitStack    = NULL;
-
-  memset(m_iOvector, 0, sizeof(m_iOvector));
 }
 
 CRegExp::CRegExp(bool caseless, CRegExp::utf8Mode utf8, const char *re, studyMode study /*= NoStudy*/)
@@ -225,7 +203,8 @@ bool CRegExp::isCharClassWithUnicode(const std::string& regexp, size_t& pos)
 CRegExp::CRegExp(const CRegExp& re)
 {
   m_re = NULL;
-  m_sd = NULL;
+  m_ctxt = NULL;
+  m_iOvector = NULL;
   m_jitStack = NULL;
   m_utf8Mode = re.m_utf8Mode;
   m_iOptions = re.m_iOptions;
@@ -240,12 +219,13 @@ CRegExp& CRegExp::operator=(const CRegExp& re)
   m_pattern = re.m_pattern;
   if (re.m_re)
   {
-    if (pcre_fullinfo(re.m_re, NULL, PCRE_INFO_SIZE, &size) >= 0)
+    if (pcre2_pattern_info(re.m_re, PCRE2_INFO_SIZE, &size) >= 0)
     {
-      if ((m_re = (pcre*)malloc(size)))
+      if ((m_re = pcre2_code_copy(re.m_re)))
       {
-        memcpy(m_re, re.m_re, size);
-        memcpy(m_iOvector, re.m_iOvector, OVECCOUNT*sizeof(int));
+        if (re.m_ctxt)
+          m_ctxt = pcre2_match_context_copy(re.m_ctxt);
+        m_iOvector = re.m_iOvector;
         m_offset = re.m_offset;
         m_iMatchCount = re.m_iMatchCount;
         m_bMatched = re.m_bMatched;
@@ -273,18 +253,28 @@ bool CRegExp::RegComp(const char *re, studyMode study /*= NoStudy*/)
   m_jitCompiled      = false;
   m_bMatched         = false;
   m_iMatchCount      = 0;
-  const char *errMsg = NULL;
-  int errOffset      = 0;
-  int options        = m_iOptions;
+  pcre2_compile_context *ctxt;
+  int errCode;
+  char errMsg[120];
+  PCRE2_SIZE errOffset;
+  uint32_t options   = m_iOptions;
   if (m_utf8Mode == autoUtf8 && requireUtf8(re))
-    options |= (IsUtf8Supported() ? PCRE_UTF8 : 0) | (AreUnicodePropertiesSupported() ? PCRE_UCP : 0);
+    options |= (IsUtf8Supported() ? PCRE2_UTF : 0) | (AreUnicodePropertiesSupported() ? PCRE2_UCP : 0);
 
   Cleanup();
 
-  m_re = pcre_compile(re, options, &errMsg, &errOffset, NULL);
+  ctxt = pcre2_compile_context_create(NULL);
+  pcre2_set_newline(ctxt, PCRE2_NEWLINE_ANY);
+  m_re = pcre2_compile(reinterpret_cast<PCRE2_SPTR>(re),
+                       PCRE2_ZERO_TERMINATED, options,
+                       &errCode, &errOffset, ctxt);
+  pcre2_compile_context_free(ctxt);
+
   if (!m_re)
   {
     m_pattern.clear();
+    pcre2_get_error_message(errCode, reinterpret_cast<PCRE2_UCHAR *>(errMsg),
+                            sizeof(errMsg));
     CLog::Log(LOGERROR, "PCRE: {}. Compilation failed at offset {} in expression '{}'", errMsg,
               errOffset, re);
     return false;
@@ -295,23 +285,12 @@ bool CRegExp::RegComp(const char *re, studyMode study /*= NoStudy*/)
   if (study)
   {
     const bool jitCompile = (study == StudyWithJitComp) && IsJitSupported();
-    const int studyOptions = jitCompile ? PCRE_STUDY_JIT_COMPILE : 0;
 
-    m_sd = pcre_study(m_re, studyOptions, &errMsg);
-    if (errMsg != NULL)
+    if (jitCompile)
     {
-      CLog::Log(LOGWARNING, "{}: PCRE error \"{}\" while studying expression", __FUNCTION__,
-                errMsg);
-      if (m_sd != NULL)
-      {
-        pcre_free_study(m_sd);
-        m_sd = NULL;
-      }
-    }
-    else if (jitCompile)
-    {
-      int jitPresent = 0;
-      m_jitCompiled = (pcre_fullinfo(m_re, m_sd, PCRE_INFO_JIT, &jitPresent) == 0 && jitPresent == 1);
+      pcre2_jit_compile(m_re, PCRE2_JIT_COMPLETE);
+      size_t jitPresent = 0;
+      m_jitCompiled = (pcre2_pattern_info(m_re, PCRE2_INFO_JITSIZE, &jitPresent) == 0 && jitPresent > 0);
     }
   }
 
@@ -325,6 +304,9 @@ int CRegExp::RegFind(const char *str, unsigned int startoffset /*= 0*/, int maxN
 
 int CRegExp::PrivateRegFind(size_t bufferLen, const char *str, unsigned int startoffset /* = 0*/, int maxNumberOfCharsToTest /*= -1*/)
 {
+  pcre2_match_data *md;
+  PCRE2_SIZE offset;
+
   m_offset      = 0;
   m_bMatched    = false;
   m_iMatchCount = 0;
@@ -347,37 +329,47 @@ int CRegExp::PrivateRegFind(size_t bufferLen, const char *str, unsigned int star
     return -1;
   }
 
-#ifdef PCRE_HAS_JIT_CODE
+  if (!m_ctxt)
+    m_ctxt = pcre2_match_context_create(NULL);
+
   if (m_jitCompiled && !m_jitStack)
   {
-    m_jitStack = pcre_jit_stack_alloc(32*1024, 512*1024);
+    m_jitStack = pcre2_jit_stack_create(32*1024, 512*1024, NULL);
     if (m_jitStack == NULL)
       CLog::Log(LOGWARNING, "{}: can't allocate address space for JIT stack", __FUNCTION__);
 
-    pcre_assign_jit_stack(m_sd, NULL, m_jitStack);
+    pcre2_jit_stack_assign(m_ctxt, NULL, m_jitStack);
   }
-#endif
 
   if (maxNumberOfCharsToTest >= 0)
     bufferLen = std::min<size_t>(bufferLen, startoffset + maxNumberOfCharsToTest);
 
   m_subject.assign(str + startoffset, bufferLen - startoffset);
-  int rc = pcre_exec(m_re, NULL, m_subject.c_str(), m_subject.length(), 0, 0, m_iOvector, OVECCOUNT);
+  md = pcre2_match_data_create(OVECCOUNT, NULL);
+  int rc = pcre2_match(m_re,
+                       reinterpret_cast<PCRE2_SPTR>(m_subject.c_str()),
+                       m_subject.length(), 0, 0, md, m_ctxt);
+  m_iOvector = pcre2_get_ovector_pointer(md);
+  offset = pcre2_get_startchar(md);
+  pcre2_match_data_free(md);
 
   if (rc<1)
   {
     static const int fragmentLen = 80; // length of excerpt before erroneous char for log
     switch(rc)
     {
-    case PCRE_ERROR_NOMATCH:
+    case PCRE2_ERROR_NOMATCH:
       return -1;
 
-    case PCRE_ERROR_MATCHLIMIT:
+    case PCRE2_ERROR_MATCHLIMIT:
       CLog::Log(LOGERROR, "PCRE: Match limit reached");
       return -1;
 
-#ifdef PCRE_ERROR_SHORTUTF8
-    case PCRE_ERROR_SHORTUTF8:
+    case PCRE2_ERROR_UTF8_ERR1:
+    case PCRE2_ERROR_UTF8_ERR2:
+    case PCRE2_ERROR_UTF8_ERR3:
+    case PCRE2_ERROR_UTF8_ERR4:
+    case PCRE2_ERROR_UTF8_ERR5:
       {
         const size_t startPos = (m_subject.length() > fragmentLen) ? CUtf8Utils::RFindValidUtf8Char(m_subject, m_subject.length() - fragmentLen) : 0;
         if (startPos != std::string::npos)
@@ -389,22 +381,41 @@ int CRegExp::PrivateRegFind(size_t bufferLen, const char *str, unsigned int star
           CLog::Log(LOGERROR, "PCRE: Bad UTF-8 character at the end of string");
         return -1;
       }
-#endif
-    case PCRE_ERROR_BADUTF8:
+    case PCRE2_ERROR_UTF8_ERR6:
+    case PCRE2_ERROR_UTF8_ERR7:
+    case PCRE2_ERROR_UTF8_ERR8:
+    case PCRE2_ERROR_UTF8_ERR9:
+    case PCRE2_ERROR_UTF8_ERR10:
+    case PCRE2_ERROR_UTF8_ERR11:
+    case PCRE2_ERROR_UTF8_ERR12:
+    case PCRE2_ERROR_UTF8_ERR13:
+    case PCRE2_ERROR_UTF8_ERR14:
+    case PCRE2_ERROR_UTF8_ERR15:
+    case PCRE2_ERROR_UTF8_ERR16:
+    case PCRE2_ERROR_UTF8_ERR17:
+    case PCRE2_ERROR_UTF8_ERR18:
+    case PCRE2_ERROR_UTF8_ERR19:
+    case PCRE2_ERROR_UTF8_ERR20:
+    case PCRE2_ERROR_UTF8_ERR21:
       {
+        char errbuf[120];
+
+        pcre2_get_error_message(rc,
+                                reinterpret_cast<PCRE2_UCHAR *>(errbuf),
+                                sizeof(errbuf));
         const size_t startPos = (m_iOvector[0] > fragmentLen) ? CUtf8Utils::RFindValidUtf8Char(m_subject, m_iOvector[0] - fragmentLen) : 0;
-        if (m_iOvector[0] >= 0 && startPos != std::string::npos)
+        if ((int)m_iOvector[0] >= 0 && startPos != std::string::npos)
           CLog::Log(LOGERROR,
                     "PCRE: Bad UTF-8 character, error code: {}, position: {}. Text before bad "
                     "char: \"{}\"",
-                    m_iOvector[1], m_iOvector[0],
+                    errbuf, offset,
                     m_subject.substr(startPos, m_iOvector[0] - startPos + 1));
         else
           CLog::Log(LOGERROR, "PCRE: Bad UTF-8 character, error code: {}, position: {}",
-                    m_iOvector[1], m_iOvector[0]);
+                    errbuf, offset);
         return -1;
       }
-    case PCRE_ERROR_BADUTF8_OFFSET:
+    case PCRE2_ERROR_BADUTFOFFSET:
       CLog::Log(LOGERROR, "PCRE: Offset is pointing to the middle of UTF-8 character");
       return -1;
 
@@ -423,7 +434,7 @@ int CRegExp::GetCaptureTotal() const
 {
   int c = -1;
   if (m_re)
-    pcre_fullinfo(m_re, NULL, PCRE_INFO_CAPTURECOUNT, &c);
+    pcre2_pattern_info(m_re, PCRE2_INFO_CAPTURECOUNT, &c);
   return c;
 }
 
@@ -524,7 +535,7 @@ std::string CRegExp::GetMatch(const std::string& subName) const
 bool CRegExp::GetNamedSubPattern(const char* strName, std::string& strMatch) const
 {
   strMatch.clear();
-  int iSub = pcre_get_stringnumber(m_re, strName);
+  int iSub = pcre2_substring_number_from_name(m_re, reinterpret_cast<PCRE2_SPTR>(strName));
   if (!IsValidSubNumber(iSub))
     return false;
   strMatch = GetMatch(iSub);
@@ -533,7 +544,7 @@ bool CRegExp::GetNamedSubPattern(const char* strName, std::string& strMatch) con
 
 int CRegExp::GetNamedSubPatternNumber(const char* strName) const
 {
-  return pcre_get_stringnumber(m_re, strName);
+  return pcre2_substring_number_from_name(m_re, reinterpret_cast<PCRE2_SPTR>(strName));
 }
 
 void CRegExp::DumpOvector(int iLog /* = LOGDEBUG */)
@@ -558,23 +569,21 @@ void CRegExp::Cleanup()
 {
   if (m_re)
   {
-    pcre_free(m_re);
+    pcre2_code_free(m_re);
     m_re = NULL;
   }
 
-  if (m_sd)
+  if (m_ctxt)
   {
-    pcre_free_study(m_sd);
-    m_sd = NULL;
+    pcre2_match_context_free(m_ctxt);
+    m_ctxt = NULL;
   }
 
-#ifdef PCRE_HAS_JIT_CODE
   if (m_jitStack)
   {
-    pcre_jit_stack_free(m_jitStack);
+    pcre2_jit_stack_free(m_jitStack);
     m_jitStack = NULL;
   }
-#endif
 }
 
 inline bool CRegExp::IsValidSubNumber(int iSub) const
@@ -587,7 +596,7 @@ bool CRegExp::IsUtf8Supported(void)
 {
   if (m_Utf8Supported == -1)
   {
-    if (pcre_config(PCRE_CONFIG_UTF8, &m_Utf8Supported) != 0)
+    if (pcre2_config(PCRE2_CONFIG_UNICODE, &m_Utf8Supported) < 0)
       m_Utf8Supported = 0;
   }
 
@@ -596,13 +605,11 @@ bool CRegExp::IsUtf8Supported(void)
 
 bool CRegExp::AreUnicodePropertiesSupported(void)
 {
-#if defined(PCRE_CONFIG_UNICODE_PROPERTIES) && PCRE_UCP != 0
   if (m_UcpSupported == -1)
   {
-    if (pcre_config(PCRE_CONFIG_UNICODE_PROPERTIES, &m_UcpSupported) != 0)
+    if (pcre2_config(PCRE2_CONFIG_UNICODE, &m_UcpSupported) < 0)
       m_UcpSupported = 0;
   }
-#endif
 
   return m_UcpSupported == 1;
 }
@@ -625,13 +632,13 @@ bool CRegExp::LogCheckUtf8Support(void)
 
   if (!utf8FullSupport)
   {
+    char ver[24];
+
+    pcre2_config(PCRE2_CONFIG_VERSION, ver);
     CLog::Log(LOGINFO,
-              "Consider installing PCRE lib version 8.10 or later with enabled Unicode properties "
+              "Consider installing PCRE lib version 10.10 or later with enabled Unicode properties "
               "and UTF-8 support. Your PCRE lib version: {}",
-              PCRE::pcre_version());
-#if PCRE_UCP == 0
-    CLog::Log(LOGINFO, "You will need to rebuild XBMC after PCRE lib update.");
-#endif
+              ver);
   }
 
   return utf8FullSupport;
@@ -641,9 +648,7 @@ bool CRegExp::IsJitSupported(void)
 {
   if (m_JitSupported == -1)
   {
-#ifdef PCRE_HAS_JIT_CODE
-    if (pcre_config(PCRE_CONFIG_JIT, &m_JitSupported) != 0)
-#endif
+    if (pcre2_config(PCRE2_CONFIG_JIT, &m_JitSupported) < 0)
       m_JitSupported = 0;
   }
 
diff --git a/xbmc/utils/RegExp.h b/xbmc/utils/RegExp.h
index 53f6019a8f..0f9bd8afb7 100644
--- a/xbmc/utils/RegExp.h
+++ b/xbmc/utils/RegExp.h
@@ -13,16 +13,8 @@
 #include <string>
 #include <vector>
 
-/* make sure stdlib.h is included before including pcre.h inside the
-   namespace; this works around stdlib.h definitions also living in
-   the PCRE namespace */
-#include <stdlib.h>
-
-namespace PCRE {
-struct real_pcre_jit_stack; // forward declaration for PCRE without JIT
-typedef struct real_pcre_jit_stack pcre_jit_stack;
-#include <pcre.h>
-}
+#define PCRE2_CODE_UNIT_WIDTH 8
+#include <pcre2.h>
 
 class CRegExp
 {
@@ -143,17 +135,17 @@ private:
   void Cleanup();
   inline bool IsValidSubNumber(int iSub) const;
 
-  PCRE::pcre* m_re;
-  PCRE::pcre_extra* m_sd;
+  pcre2_code* m_re;
+  pcre2_match_context* m_ctxt;
   static const int OVECCOUNT=(m_MaxNumOfBackrefrences + 1) * 3;
   unsigned int m_offset;
-  int         m_iOvector[OVECCOUNT];
+  PCRE2_SIZE* m_iOvector;
   utf8Mode    m_utf8Mode;
   int         m_iMatchCount;
-  int         m_iOptions;
+  uint32_t    m_iOptions;
   bool        m_jitCompiled;
   bool        m_bMatched;
-  PCRE::pcre_jit_stack* m_jitStack;
+  pcre2_jit_stack* m_jitStack;
   std::string m_subject;
   std::string m_pattern;
   static int  m_Utf8Supported;
diff --git a/xbmc/utils/test/TestRegExp.cpp b/xbmc/utils/test/TestRegExp.cpp
index d757127417..fb80fd8380 100644
--- a/xbmc/utils/test/TestRegExp.cpp
+++ b/xbmc/utils/test/TestRegExp.cpp
@@ -30,6 +30,29 @@ TEST(TestRegExp, RegFind)
   EXPECT_EQ(-1, regex.RegFind("Test string."));
 }
 
+TEST(TestRegExp, InvalidPattern)
+{
+  CRegExp regex;
+
+  EXPECT_FALSE(regex.RegComp("+"));
+}
+
+TEST(TestRegExp, Unicode)
+{
+  CRegExp regex;
+
+  EXPECT_TRUE(regex.RegComp("Бог!$"));
+  EXPECT_EQ(12, regex.RegFind("С нами Бог!"));
+}
+
+TEST(TestRegExp, JIT)
+{
+  CRegExp regex;
+
+  EXPECT_TRUE(regex.RegComp(".JIT.", CRegExp::StudyWithJitComp));
+  EXPECT_EQ(12, regex.RegFind("Test string, JIT-matched."));
+}
+
 TEST(TestRegExp, GetReplaceString)
 {
   CRegExp regex;
-- 
2.43.0


From be6e76f12d0647b04e1bef4f2bf10097257c806e Mon Sep 17 00:00:00 2001
From: Vasyl Gello <vasek.gello@gmail.com>
Date: Wed, 7 Feb 2024 10:27:07 +0000
Subject: [PATCH 2/3] Adapt FindPCRE.cmake to PCRE2

Signed-off-by: Vasyl Gello <vasek.gello@gmail.com>
---
 cmake/modules/FindPCRE.cmake | 12 ++++--------
 1 file changed, 4 insertions(+), 8 deletions(-)

diff --git a/cmake/modules/FindPCRE.cmake b/cmake/modules/FindPCRE.cmake
index 811aa3fcb2..443bc51379 100644
--- a/cmake/modules/FindPCRE.cmake
+++ b/cmake/modules/FindPCRE.cmake
@@ -73,21 +73,17 @@ if(NOT PCRE::pcre)
   else()
     if(NOT TARGET PCRE::pcre)
       if(PKG_CONFIG_FOUND)
-        pkg_check_modules(PC_PCRE pcre QUIET)
+        pkg_check_modules(PC_PCRE pcre2-8 QUIET)
       endif()
 
-      find_path(PCRE_INCLUDE_DIR pcre.h
+      find_path(PCRE_INCLUDE_DIR pcre2.h
                                  HINTS ${DEPENDS_PATH}/include ${PC_PCRE_INCLUDEDIR}
                                  ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
                                  NO_CACHE)
-      find_library(PCRE_LIBRARY_RELEASE NAMES pcre
+      find_library(PCRE_LIBRARY_RELEASE NAMES pcre2-8
                                         HINTS ${DEPENDS_PATH}/lib ${PC_PCRE_LIBDIR}
                                         ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
                                         NO_CACHE)
-      find_library(PCRE_LIBRARY_DEBUG NAMES pcred
-                                      HINTS ${DEPENDS_PATH}/lib ${PC_PCRE_LIBDIR}
-                                      ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
-                                      NO_CACHE)
       set(PCRE_VERSION ${PC_PCRE_VERSION})
     else()
 
@@ -104,7 +100,7 @@ if(NOT PCRE::pcre)
       endforeach()
 
       # ToDo: patch PCRE cmake to include includedir in config file
-      find_path(PCRE_INCLUDE_DIR pcre.h
+      find_path(PCRE_INCLUDE_DIR pcre2.h
                                  HINTS ${DEPENDS_PATH}/include ${PC_PCRE_INCLUDEDIR}
                                  ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
                                  NO_CACHE)
-- 
2.43.0


From 6efd635acb9e8ce9252459cc30f8b994c3c09e9f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Markus=20H=C3=A4rer?= <markus.haerer@gmx.net>
Date: Fri, 28 Jun 2024 00:34:12 +0200
Subject: [PATCH] RegExp: Fix heap-use-after-free

`m_iOvector` is a pointer array into the match data, so the match data must be
kept as long as `m_iOvector` is used.

Address Sanitizer output:

==28015==ERROR: AddressSanitizer: heap-use-after-free on address 0x5190000406e8 at pc 0x59cf02e5ad9e bp 0x7ffdcd8a1a10 sp 0x7ffdcd8a1a08
READ of size 8 at 0x5190000406e8 thread T0
    #0 0x59cf02e5ad9d in CRegExp::PrivateRegFind(unsigned long, char const*, unsigned int, int) xbmc/utils/RegExp.cpp:425:10
    #1 0x59cf013cb942 in CRegExp::RegFind(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, unsigned int, int) xbmc/utils/RegExp.h:95:12
    #2 0x59cf0316a9ef in CXBMCTinyXML2::ParseHelper(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&) xbmc/utils/XBMCTinyXML2.cpp:106:12
    #3 0x59cf0316965b in CXBMCTinyXML2::Parse(std::basic_string_view<char, std::char_traits<char>>) xbmc/utils/XBMCTinyXML2.cpp:82:10
    #4 0x59cf03168fac in CXBMCTinyXML2::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) xbmc/utils/XBMCTinyXML2.cpp:36:3
    #5 0x59cf0563fe1b in CMediaSourceSettings::Load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) xbmc/settings/MediaSourceSettings.cpp:85:15
    #6 0x59cf0563f590 in CMediaSourceSettings::Load() xbmc/settings/MediaSourceSettings.cpp:71:10
    #7 0x59cf0563f3d0 in CMediaSourceSettings::OnSettingsLoaded() xbmc/settings/MediaSourceSettings.cpp:61:3
    #8 0x59cf053c86c4 in CSettingsManager::OnSettingsLoaded() xbmc/settings/lib/SettingsManager.cpp:1022:22
    #9 0x59cf053969dc in CSettingsManager::Load(TiXmlElement const*, bool&, bool, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::shared_ptr<CSetting>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::shared_ptr<CSetting>>>>*) xbmc/settings/lib/SettingsManager.cpp:173:5
    #10 0x59cf056ed775 in CSettingsBase::LoadValuesFromXml(TiXmlElement const*, bool&) xbmc/settings/SettingsBase.cpp:86:29
    #11 0x59cf056b96b0 in CSettings::Load(TiXmlElement const*, bool&) xbmc/settings/Settings.cpp:217:23
    #12 0x59cf056b8f00 in CSettings::Load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) xbmc/settings/Settings.cpp:125:8
    #13 0x59cf056b87e5 in CSettings::Load() xbmc/settings/Settings.cpp:117:10
    #14 0x59cf05715a60 in CSettingsComponent::Load() xbmc/settings/SettingsComponent.cpp:83:22
    #15 0x59cf041da912 in CApplication::Create() xbmc/application/Application.cpp:320:27
    #16 0x59cf033b4eed in XBMC_Run xbmc/platform/xbmc.cpp:26:22
    #17 0x59cf00752b7f in main xbmc/platform/posix/main.cpp:70:16
    #18 0x74a07d239c87  (/usr/lib/libc.so.6+0x25c87) (BuildId: 32a656aa5562eece8c59a585f5eacd6cf5e2307b)
    #19 0x74a07d239d4b in __libc_start_main (/usr/lib/libc.so.6+0x25d4b) (BuildId: 32a656aa5562eece8c59a585f5eacd6cf5e2307b)
    #20 0x59cf00618804 in _start (/home/mark/Coding/Repos/kodi-git/build_clang_debug_sanitizer/kodi.bin+0x9f91804) (BuildId: fa447ae84e6fbfe91e7ec718a600116496d7607e)

0x5190000406e8 is located 104 bytes inside of 1112-byte region [0x519000040680,0x519000040ad8)
freed by thread T0 here:
    #0 0x59cf007069b2 in free.part.0 (/home/mark/Coding/Repos/kodi-git/build_clang_debug_sanitizer/kodi.bin+0xa07f9b2) (BuildId: fa447ae84e6fbfe91e7ec718a600116496d7607e)
    #1 0x59cf02e59ed8 in CRegExp::PrivateRegFind(unsigned long, char const*, unsigned int, int) xbmc/utils/RegExp.cpp:352:3
    #2 0x59cf013cb942 in CRegExp::RegFind(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, unsigned int, int) xbmc/utils/RegExp.h:95:12
    #3 0x59cf0316a9ef in CXBMCTinyXML2::ParseHelper(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&) xbmc/utils/XBMCTinyXML2.cpp:106:12
    #4 0x59cf0316965b in CXBMCTinyXML2::Parse(std::basic_string_view<char, std::char_traits<char>>) xbmc/utils/XBMCTinyXML2.cpp:82:10
    #5 0x59cf03168fac in CXBMCTinyXML2::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) xbmc/utils/XBMCTinyXML2.cpp:36:3
    #6 0x59cf0563fe1b in CMediaSourceSettings::Load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) xbmc/settings/MediaSourceSettings.cpp:85:15
    #7 0x59cf0563f590 in CMediaSourceSettings::Load() xbmc/settings/MediaSourceSettings.cpp:71:10
    #8 0x59cf0563f3d0 in CMediaSourceSettings::OnSettingsLoaded() xbmc/settings/MediaSourceSettings.cpp:61:3
    #9 0x59cf053c86c4 in CSettingsManager::OnSettingsLoaded() xbmc/settings/lib/SettingsManager.cpp:1022:22
    #10 0x59cf053969dc in CSettingsManager::Load(TiXmlElement const*, bool&, bool, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::shared_ptr<CSetting>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::shared_ptr<CSetting>>>>*) xbmc/settings/lib/SettingsManager.cpp:173:5
    #11 0x59cf056ed775 in CSettingsBase::LoadValuesFromXml(TiXmlElement const*, bool&) xbmc/settings/SettingsBase.cpp:86:29
    #12 0x59cf056b96b0 in CSettings::Load(TiXmlElement const*, bool&) xbmc/settings/Settings.cpp:217:23
    #13 0x59cf056b8f00 in CSettings::Load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) xbmc/settings/Settings.cpp:125:8
    #14 0x59cf056b87e5 in CSettings::Load() xbmc/settings/Settings.cpp:117:10
    #15 0x59cf05715a60 in CSettingsComponent::Load() xbmc/settings/SettingsComponent.cpp:83:22
    #16 0x59cf041da912 in CApplication::Create() xbmc/application/Application.cpp:320:27
    #17 0x59cf033b4eed in XBMC_Run xbmc/platform/xbmc.cpp:26:22
    #18 0x59cf00752b7f in main xbmc/platform/posix/main.cpp:70:16
    #19 0x74a07d239c87  (/usr/lib/libc.so.6+0x25c87) (BuildId: 32a656aa5562eece8c59a585f5eacd6cf5e2307b)
    #20 0x74a07d239d4b in __libc_start_main (/usr/lib/libc.so.6+0x25d4b) (BuildId: 32a656aa5562eece8c59a585f5eacd6cf5e2307b)
    #21 0x59cf00618804 in _start (/home/mark/Coding/Repos/kodi-git/build_clang_debug_sanitizer/kodi.bin+0x9f91804) (BuildId: fa447ae84e6fbfe91e7ec718a600116496d7607e)

previously allocated by thread T0 here:
    #0 0x59cf007079e9 in malloc (/home/mark/Coding/Repos/kodi-git/build_clang_debug_sanitizer/kodi.bin+0xa0809e9) (BuildId: fa447ae84e6fbfe91e7ec718a600116496d7607e)
    #1 0x74a07fb7faed  (/usr/lib/libpcre2-8.so.0+0x12aed) (BuildId: d6a22ace8f92ae592b620499fc467ef7899f99a0)
    #2 0x74a07fbbf29f in pcre2_match_data_create_8 (/usr/lib/libpcre2-8.so.0+0x5229f) (BuildId: d6a22ace8f92ae592b620499fc467ef7899f99a0)
    #3 0x59cf02e59c65 in CRegExp::PrivateRegFind(unsigned long, char const*, unsigned int, int) xbmc/utils/RegExp.cpp:347:8
    #4 0x59cf013cb942 in CRegExp::RegFind(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, unsigned int, int) xbmc/utils/RegExp.h:95:12
    #5 0x59cf0316a9ef in CXBMCTinyXML2::ParseHelper(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&) xbmc/utils/XBMCTinyXML2.cpp:106:12
    #6 0x59cf0316965b in CXBMCTinyXML2::Parse(std::basic_string_view<char, std::char_traits<char>>) xbmc/utils/XBMCTinyXML2.cpp:82:10
    #7 0x59cf03168fac in CXBMCTinyXML2::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) xbmc/utils/XBMCTinyXML2.cpp:36:3
    #8 0x59cf0563fe1b in CMediaSourceSettings::Load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) xbmc/settings/MediaSourceSettings.cpp:85:15
    #9 0x59cf0563f590 in CMediaSourceSettings::Load() xbmc/settings/MediaSourceSettings.cpp:71:10
    #10 0x59cf0563f3d0 in CMediaSourceSettings::OnSettingsLoaded() xbmc/settings/MediaSourceSettings.cpp:61:3
    #11 0x59cf053c86c4 in CSettingsManager::OnSettingsLoaded() xbmc/settings/lib/SettingsManager.cpp:1022:22
    #12 0x59cf053969dc in CSettingsManager::Load(TiXmlElement const*, bool&, bool, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::shared_ptr<CSetting>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::shared_ptr<CSetting>>>>*) xbmc/settings/lib/SettingsManager.cpp:173:5
    #13 0x59cf056ed775 in CSettingsBase::LoadValuesFromXml(TiXmlElement const*, bool&) xbmc/settings/SettingsBase.cpp:86:29
    #14 0x59cf056b96b0 in CSettings::Load(TiXmlElement const*, bool&) xbmc/settings/Settings.cpp:217:23
    #15 0x59cf056b8f00 in CSettings::Load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) xbmc/settings/Settings.cpp:125:8
    #16 0x59cf056b87e5 in CSettings::Load() xbmc/settings/Settings.cpp:117:10
    #17 0x59cf05715a60 in CSettingsComponent::Load() xbmc/settings/SettingsComponent.cpp:83:22
    #18 0x59cf041da912 in CApplication::Create() xbmc/application/Application.cpp:320:27
    #19 0x59cf033b4eed in XBMC_Run xbmc/platform/xbmc.cpp:26:22
    #20 0x59cf00752b7f in main xbmc/platform/posix/main.cpp:70:16
    #21 0x74a07d239c87  (/usr/lib/libc.so.6+0x25c87) (BuildId: 32a656aa5562eece8c59a585f5eacd6cf5e2307b)
    #22 0x74a07d239d4b in __libc_start_main (/usr/lib/libc.so.6+0x25d4b) (BuildId: 32a656aa5562eece8c59a585f5eacd6cf5e2307b)
    #23 0x59cf00618804 in _start (/home/mark/Coding/Repos/kodi-git/build_clang_debug_sanitizer/kodi.bin+0x9f91804) (BuildId: fa447ae84e6fbfe91e7ec718a600116496d7607e)

SUMMARY: AddressSanitizer: heap-use-after-free xbmc/utils/RegExp.cpp:425:10 in CRegExp::PrivateRegFind(unsigned long, char const*, unsigned int, int)
Shadow bytes around the buggy address:
  0x519000040400: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x519000040480: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x519000040500: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x519000040580: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa
  0x519000040600: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x519000040680: fd fd fd fd fd fd fd fd fd fd fd fd fd[fd]fd fd
  0x519000040700: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x519000040780: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x519000040800: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x519000040880: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x519000040900: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==28015==ABORTING
---
 xbmc/utils/RegExp.cpp | 19 +++++++++++++------
 xbmc/utils/RegExp.h   |  1 +
 2 files changed, 14 insertions(+), 6 deletions(-)

diff --git a/xbmc/utils/RegExp.cpp b/xbmc/utils/RegExp.cpp
index 7d9ae4940..fb32517e8 100644
--- a/xbmc/utils/RegExp.cpp
+++ b/xbmc/utils/RegExp.cpp
@@ -46,6 +46,7 @@ void CRegExp::InitValues(bool caseless /*= false*/, CRegExp::utf8Mode utf8 /*= a
   m_jitCompiled = false;
   m_bMatched    = false;
   m_iMatchCount = 0;
+  m_matchData = nullptr;
   m_iOvector    = NULL;
   m_jitStack    = NULL;
 }
@@ -204,6 +205,7 @@ CRegExp::CRegExp(const CRegExp& re)
 {
   m_re = NULL;
   m_ctxt = NULL;
+  m_matchData = nullptr;
   m_iOvector = NULL;
   m_jitStack = NULL;
   m_utf8Mode = re.m_utf8Mode;
@@ -304,7 +306,6 @@ int CRegExp::RegFind(const char *str, unsigned int startoffset /*= 0*/, int maxN
 
 int CRegExp::PrivateRegFind(size_t bufferLen, const char *str, unsigned int startoffset /* = 0*/, int maxNumberOfCharsToTest /*= -1*/)
 {
-  pcre2_match_data *md;
   PCRE2_SIZE offset;
 
   m_offset      = 0;
@@ -345,13 +346,13 @@ int CRegExp::PrivateRegFind(size_t bufferLen, const char *str, unsigned int star
     bufferLen = std::min<size_t>(bufferLen, startoffset + maxNumberOfCharsToTest);
 
   m_subject.assign(str + startoffset, bufferLen - startoffset);
-  md = pcre2_match_data_create(OVECCOUNT, NULL);
+  if (m_matchData == nullptr)
+    m_matchData = pcre2_match_data_create(OVECCOUNT, nullptr);
   int rc = pcre2_match(m_re,
                        reinterpret_cast<PCRE2_SPTR>(m_subject.c_str()),
-                       m_subject.length(), 0, 0, md, m_ctxt);
-  m_iOvector = pcre2_get_ovector_pointer(md);
-  offset = pcre2_get_startchar(md);
-  pcre2_match_data_free(md);
+                       m_subject.length(), 0, 0, m_matchData, m_ctxt);
+  m_iOvector = pcre2_get_ovector_pointer(m_matchData);
+  offset = pcre2_get_startchar(m_matchData);
 
   if (rc<1)
   {
@@ -584,6 +586,12 @@ void CRegExp::Cleanup()
     pcre2_jit_stack_free(m_jitStack);
     m_jitStack = NULL;
   }
+
+  if (m_matchData)
+  {
+    pcre2_match_data_free(m_matchData);
+    m_matchData = nullptr;
+  }
 }
 
 inline bool CRegExp::IsValidSubNumber(int iSub) const
diff --git a/xbmc/utils/RegExp.h b/xbmc/utils/RegExp.h
index 0f9bd8afb..817fcb377 100644
--- a/xbmc/utils/RegExp.h
+++ b/xbmc/utils/RegExp.h
@@ -139,6 +139,7 @@ private:
   pcre2_match_context* m_ctxt;
   static const int OVECCOUNT=(m_MaxNumOfBackrefrences + 1) * 3;
   unsigned int m_offset;
+  pcre2_match_data* m_matchData;
   PCRE2_SIZE* m_iOvector;
   utf8Mode    m_utf8Mode;
   int         m_iMatchCount;
-- 
2.43.0

